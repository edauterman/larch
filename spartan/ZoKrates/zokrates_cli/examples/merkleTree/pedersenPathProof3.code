import "hashes/pedersen/512bit.code" as hash
import "ecc/edwardsCompress.code" as edwardsCompress
import "ecc/babyjubjubParams.code" as context
import "hashes/utils/256bitsDirectionHelper.code" as multiplex
import "utils/binary/not.code" as NOT
// Merke-Tree inclusion proof for tree depth 3 using SNARK efficient pedersen hashes 
// directionSelector=> 1/true if current digest is on the rhs of the hash
def main(field[256] rootDigest, private field[256] leafDigest, private field[3] directionSelector, field[256] PathDigest0, private field[256] PathDigest1, private field[256] PathDigest2) -> (field):
	context = context()

	//Setup
	field[256] currentDigest = leafDigest
	
	//Loop up the tree
	preimage = multiplex(directionSelector[0], currentDigest, PathDigest0)
	currentDigest = hash(preimage)

	preimage = multiplex(directionSelector[1], currentDigest, PathDigest1)
	currentDigest = hash(preimage)

	preimage = multiplex(directionSelector[2], currentDigest, PathDigest2)
	currentDigest = hash(preimage)

	rootDigest == currentDigest
	
	return 1 //return true in success 

